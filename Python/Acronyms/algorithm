Import list of stopwords
Generate list of reject words (capitalized words that aren't acronyms)
Import acronym database (optional)
Read text file

Ignore lines that are all uppercase
Identify an acronym candidate (all upercase word between 3 and 10 characters)
consult reject word list
check the text window
    - pre-window (number of words preceding candidate)
    - post-window (number of words following candidate)
    - the number of words for each is equal to twice the character length of the candidate

4 different types of words
- stopwords
- hyphenated words
- acronyms
- all other words

for each subwindow, generate two arrays
    - leader array -- first letter of each word
    - type array -- the type of each word in the subwindow
    - use s, H, h, a and w for the type array

So the subwindow "results in the generation of transuranic (TRU) non-high-level solid waste"
generates
    leader: [r i t g o t t n h l s w]
    type:   [w s s w s w a H h h w w]

identify largest common subsequence of the letters of the acronym and the leader array

algorithm to build matrix of longest common subsequences

build-LCS-matrix(X, Y)

m <- length(X);
n <- length(Y);
for i <- 0 to m do:
    c[i, 0] <- 0;
for j <- 0 to n do:
    c[0, j] <- 0;
for i <- 1 to m do:
    for j <- 1 to n do:
        if X[i] = Y[j] then:
            c[i, j] <- c[i-1, j-1] + 1;
            b[i, j] <- "↑←";
        else if c[i-1, j] >= c[i, j-1] then:
            c[i, j] <- c[i-1, j];
            b[i, j] <- "↑";
        else:
            c[i, j] <- c[i, j-1];
            b[i, j] <- "←";

return c and b;

after this, calculate confidence level

This function computes the length of the LCS for strings X and Y and stores this in c[m, n]
if this LCS length falls below the confidence level threshold, we dont' process this acronym anymore

↑← in b[i,j] means that X[i] = Y[j], and c[i-1, j-1] + 1 is the selected value
↑ or ← in b[i,j] means that X[i] != Y[j] and c[i-1, j] or c[i, j-1] is the selected value

This only gives us one LCS, so we use these as well:

parse-LCS-matrix(b, start_i, start_j, m, n, les_length, Stack, Vectorlist)

for i <- start_i to m do:
    for j <- start_j to n do:
        if b[i, j] = "↑←" then:
            s <- build-stack{i, j);
            push(Stack, s);
            if lcs_length = 1 then:
                vector <- build-vector(Stack, n);
                add(Vectorlist, vector);
            else:
                parse-LCS-matrix(b, i+1, j+1, m, n, les_length-1, Stack, Vectorlist);
            pop(Stack);
return;


and

build-vector(Stack, n)

v <- allocate-vector(n);
for j<- 1 to n do:
    v[j] <- 0;
s <- Stack;
while s != NIL do:
    v[s[j]] <- s[i];
    s <- next[s];
return v;

these functions will generate ordered lists of indices and vectors

so LCS("onwi", "motoonwi") gives
(1,2), (2,6), (3,7), (4,8)
(1,4), (2,6), (3,7), (4,8)
(1,5), (2,6), (3,7), (4,8)

and then gives us vectors
[0 1 0 0 0 2 3 4]
[0 0 0 1 0 2 3 4]
[0 0 0 0 1 2 3 4]

now we just have to select which of those yields the correct acronym definition

we get an algorithm that yields the following four values:
    misses[V]
        - number of zero entries in the vector
    stopcount[V]
        - number of stopwords used in the acrownym definition if that vector is selected
    distance[V]
        - index of the last non-zero entry
    size[V]
        - number of entries in the vector after removing trailing and leading zeroes


vector-values(V)

i <- 1;
while i < length[V] and V[i] = 0 do:
    i <- i + 1;
first <- 1;
i <- length[V];
while i > 0 and V[i] = 0 do:
    i <- i - 1;
last <- i;
size[V] <- last - first;
distance[V] <- length[V] - last;
for i <- first to last do:
    if V[i] > 0 and types[i] = 's' then:
        stopcount[V] <- stopcount[V] + 1;
    else if V[i] = 0 and types[i] != 's' and types[i] != 'h' then:
        misses [V] <- misses[V] + 1;

compare-vectors(A, B)

vector-values(A);
vector-values(B);
if misses[A] > misses[B] then:
    return (B);
else if misses[A] < misses[B] then:
    return (A);
if stopcount[A] > stopcount[B] then:
    return (B);
else if stopcount[a] < stopcount[B] then:
    return (A);
if distance[A] > distance[B] then:
    return (B);
else if distance[A] < distance[B] then:
    return (A);
if size[A] > size[B] then:
    return (B);
else if size[A] < size[B] then:
    return (A);
return (A);


confidence level = length of LCS
                   -------------    + error percentage(20% by default)
                # of acronym letters

if confidence level < 1, abandon search


